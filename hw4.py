import math
import json
import folium
from python_tsp.heuristics import solve_tsp_simulated_annealing
import numpy as np


# === 1. –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ—á–µ–∫ –∏–∑ —Ñ–∞–π–ª–∞ JSON ===
def load_points_from_file(filename):
    with open(filename, 'r', encoding='utf-8') as f:
        raw = json.load(f)
    points = []
    names = []
    for item in raw:
        lat, lon, priority, name = item
        points.append((lat, lon, priority))
        names.append(name)
    return points, names

def calc_distance(p1, p2):
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ –Ω–∞ –ó–µ–º–ª–µ –ø–æ —Ñ–æ—Ä–º—É–ª–µ –≥–∞–≤–µ—Ä—Å–∏–Ω—É—Å–∞.
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–≤–µ —Ç–æ—á–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ (—à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö.
    """
    R = 6371  # –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ –≥—Ä–∞–¥—É—Å–æ–≤ –≤ —Ä–∞–¥–∏–∞–Ω—ã
    lat1, lon1 = p1[0], p1[1]
    lat2, lon2 = p2[0], p2[1]
    dlat = math.radians(lat2 - lat1)
    dlon = math.radians(lon2 - lon1)

    # –§–æ—Ä–º—É–ª–∞ –≥–∞–≤–µ—Ä—Å–∏–Ω—É—Å–∞
    a = math.sin(dlat / 2) ** 2 + \
        math.cos(math.radians(lat1)) * math.cos(math.radians(lat2)) * math.sin(dlon / 2) ** 2

    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))
    return R * c # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–º


# === 3. –§—É–Ω–∫—Ü–∏—è –≤–≤–æ–¥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ===
def get_user_input():
    print("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—è:")
    print("1 - –ü–µ—à–∫–æ–º (5 –∫–º/—á)")
    print("2 - –ù–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥–µ (15 –∫–º/—á)")
    print("3 - –ù–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ (80 –∫–º/—á)")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤–≤–æ–¥–∞ —Å–ø–æ—Å–æ–±–∞ –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—è
    while True:
        choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä: ").strip()
        if choice in ['1', '2', '3']:
            break
        print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 1, 2 –∏–ª–∏ 3.")

    # –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤—ã–±–æ—Ä–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏
    speeds = {'1': 5, '2': 15, '3': 80}
    speed = speeds[choice]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏
    while True:
        try:
            max_time = float(input("–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–µ–∑–¥–∫–∏ –≤ —á–∞—Å–∞—Ö: "))
            if max_time > 0:
                break
            print("–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
        except ValueError:
            print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

    return speed, max_time


# === 4. –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ç—Ä–∏—Ü—ã —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π ===
def create_distance_matrix(points):
    """
    –°–æ–∑–¥–∞–µ—Ç –º–∞—Ç—Ä–∏—Ü—É —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –º–µ–∂–¥—É –≤—Å–µ–º–∏ —Ç–æ—á–∫–∞–º–∏ –º–∞—Ä—à—Ä—É—Ç–∞.
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ—á–µ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ (—à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–≤–∞–¥—Ä–∞—Ç–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É numpy, –≥–¥–µ —ç–ª–µ–º–µ–Ω—Ç [i][j] - —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É i-–π –∏ j-–π —Ç–æ—á–∫–æ–π.
    """
    n = len(points)
    distance_matrix = np.zeros((n, n))

    for i in range(n):
        for j in range(n):
            if i != j:
                distance_matrix[i][j] = calc_distance(points[i], points[j])

    return distance_matrix


# === 5. –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ ===
def find_optimal_route(points, city_names, distance_matrix, speed, max_time):
    # –†–µ—à–∞–µ–º –∑–∞–¥–∞—á—É –∫–æ–º–º–∏–≤–æ—è–∂–µ—Ä–∞ (–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏)
    permutation, _ = solve_tsp_simulated_annealing(distance_matrix)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ª—É—á—à–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
    best_route = []
    best_priority = 0
    best_distance = 0
    best_time = 0

    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥–ª–∏–Ω—ã –º–∞—Ä—à—Ä—É—Ç–∞ –æ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π
    for route_length in range(len(points), 1, -1):
        current_route = permutation[:route_length]  # –¢–µ–∫—É—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –º–∞—Ä—à—Ä—É—Ç–∞
        current_distance = 0
        current_priority = 0
        current_time = 0
        valid_route = True  # –§–ª–∞–≥ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –º–∞—Ä—à—Ä—É—Ç–∞

        # –†–∞—Å—á–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
        for i in range(len(current_route) - 1):
            from_idx = current_route[i]
            to_idx = current_route[i + 1]
            dist = distance_matrix[from_idx][to_idx]  # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏
            time = dist / speed  # –í—Ä–µ–º—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
            if current_time + time > max_time:
                valid_route = False
                break

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–∞—Ä—à—Ä—É—Ç–∞
            current_distance += dist
            current_time += time
            current_priority += points[from_idx][2]  # –£—á–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ —Ç–æ—á–∫–∏

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞
        if valid_route and len(current_route) > 0:
            last_idx = current_route[-1]
            current_priority += points[last_idx][2]  # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç–æ—á–∫–∏

            # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π –º–∞—Ä—à—Ä—É—Ç –ª—É—á—à–∏–º
            if current_priority > best_priority:
                best_priority = current_priority
                best_route = current_route
                best_distance = current_distance
                best_time = current_time

    return best_route, best_distance, best_time, best_priority


# === 6. –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã ===
def main():
    SPEED_KMH, MAX_TIME = get_user_input()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ—á–∫–∞—Ö –º–∞—Ä—à—Ä—É—Ç–∞
    try:
        points_list, city_names = load_points_from_file('trip.json')
    except FileNotFoundError:
        print("–§–∞–π–ª 'trip.json' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        points_list = [
            (55.7558, 37.6176, 1),  # –ú–æ—Å–∫–≤–∞
            (59.9343, 30.3351, 8),  # –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥
            (47.2355, 39.7078, 6),  # –†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É
            (54.9803, 73.3757, 5),  # –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫
            (56.8389, 60.6057, 7),  # –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥
            (55.1599, 61.4029, 10)  # –ß–µ–ª—è–±–∏–Ω—Å–∫
        ]
        city_names = [
            "–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É",
            "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", "–ß–µ–ª—è–±–∏–Ω—Å–∫"
        ]

    # –°—Ç—Ä–æ–∏–º –º–∞—Ç—Ä–∏—Ü—É —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –º–µ–∂–¥—É –≤—Å–µ–º–∏ —Ç–æ—á–∫–∞–º–∏
    distance_matrix = create_distance_matrix(points_list)

    # –ù–∞—Ö–æ–¥–∏–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç
    best_route, best_distance, best_time, best_priority = find_optimal_route(
        points_list, city_names, distance_matrix, SPEED_KMH, MAX_TIME
    )

    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if best_route:
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ —á–∞—Å—ã, –º–∏–Ω—É—Ç—ã, —Å–µ–∫—É–Ω–¥—ã
        total_seconds = int(best_time * 3600)
        hours, remainder = divmod(total_seconds, 3600)
        minutes, seconds = divmod(remainder, 60)

        # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—Ä—à—Ä—É—Ç–µ
        print("\n‚úÖ –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç:")
        for idx in best_route:
            print(f"- {city_names[idx]} (–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {points_list[idx][2]})")
        print(f"\n–û–±—â–∞—è –¥–ª–∏–Ω–∞ –º–∞—Ä—à—Ä—É—Ç–∞: {best_distance:.2f} –∫–º")
        print(f"–í—Ä–µ–º—è –Ω–∞ –¥–æ—Ä–æ–≥—É: {hours} —á {minutes} –º–∏–Ω {seconds} —Å–µ–∫")
        print(f"–°—É–º–º–∞—Ä–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {best_priority}")

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã —Å –º–∞—Ä—à—Ä—É—Ç–æ–º
        map_center = [points_list[best_route[0]][0], points_list[best_route[0]][1]]
        my_map = folium.Map(location=map_center, zoom_start=4)

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–æ–≤ –¥–ª—è –≤—Å–µ—Ö —Ç–æ—á–µ–∫
        for idx, point in enumerate(points_list):
            color = 'red' if idx in best_route else 'blue'  # –¶–≤–µ—Ç –º–∞—Ä–∫–µ—Ä–∞
            name = city_names[idx]
            folium.Marker(
                location=[point[0], point[1]],
                popup=f"{name}\n–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {point[2]}",
                icon=folium.Icon(color=color, icon='info-sign')
            ).add_to(my_map)

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–∏–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞
        path_coords = [[points_list[i][0], points_list[i][1]] for i in best_route]
        folium.PolyLine(path_coords, color="green", weight=2.5, opacity=1).add_to(my_map)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –≤ HTML-—Ñ–∞–π–ª
        my_map.save('optimized_route.html')
        print("\nüó∫ –ö–∞—Ä—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫ 'optimized_route.html'")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –º–∞—Ä—à—Ä—É—Ç.")


# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É
if __name__ == "__main__":
    main()